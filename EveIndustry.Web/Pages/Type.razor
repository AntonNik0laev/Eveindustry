@page "/Type/{id:long}"
@using Eveindustry.Shared.DTO.EveType
@using EveIndustry.Web.Services
@using Eveindustry.Shared
@using System.Collections.ObjectModel
@using BlazorTable
@using Eveindustry.Shared.DTO
@using EveIndustry.Web.Shared.ConfigureMaterialsForm

@inject IEveItemSearchService EveItemSearchService
@inject IManufacturingInfoBuilder ManufacturingInfoBuilder;
@inject IModalService Modal;

<h1>Manufacturing plan for @ItemToBuild?.Name . Quantity:         <input @onkeyup="async (t) => await OnSearchChanged(t)" Class="e-autocomplete" @bind-value="Quantity" @bind-value:event="oninput"/> </h1>

<button class="btn btn-primary" @onclick="SelectAll">All</button>
<button class="btn btn-primary"  @onclick="ConfigureSelected" >Configure Selected</button>
<button class="btn" @onclick="SetBuild">Build</button> 
<button class="btn" @onclick="SetBuy">Buy</button> 
@for (int i = 0; i < Items.Count(); i++)
{
    int index = i;
    <h2>Stage @i</h2> 
    <BlazorTable.Table ShowFooter="true" PageSize="9999" TableItem="EveManufacturialQuantity" Items="Items[index]" SelectionType="BlazorTable.SelectionType.Multiple" SelectedItems="SelectedItems[index]" >
        <BlazorTable.Column TableItem="EveManufacturialQuantity" Title="Id" Field="@(x => x.Material.Id)" Width="4%"/>
        <BlazorTable.Column TableItem="EveManufacturialQuantity" Sortable="true" Title="Name" Field="@(x => x.Material.Name)" Width="30%"/>
        <BlazorTable.Column TableItem="EveManufacturialQuantity" Format = "N2" Aggregate="AggregateType.Sum" Sortable="true" Title="Quantity" Field="@(x => x.Quantity)" Width="12%"/>
        <BlazorTable.Column TableItem="EveManufacturialQuantity" Format = "N2" Aggregate="AggregateType.Sum" Sortable="true" Title="JBV" Field="@(x => x.TotalJitaBuyPrice)" Width="14%"/>
        <BlazorTable.Column TableItem="EveManufacturialQuantity" Format = "N2" Aggregate="AggregateType.Sum" Sortable="true" Title="JSV" Field="@(x => x.TotalJitaSellPrice)" Width="14%"/>
        <BlazorTable.Column TableItem="EveManufacturialQuantity" Format = "N2" Aggregate="AggregateType.Sum" Sortable="true" Title="Materials JSV" Field="@(x => x.MaterialsJitaBuyPrice)" Width="14%"/>
        <BlazorTable.Column TableItem="EveManufacturialQuantity" Format = "N2" Aggregate="AggregateType.Sum" Sortable="true" Title="Materials JSV" Field="@(x => x.MaterialsJitaSellPrice)" Width="14%"/>
    </BlazorTable.Table>
}


@code {

    [Parameter]
    public long Id { get; set; }

    public long Quantity { get; set; } = 1;

    public IList<List<EveManufacturialQuantity>> SelectedItems { get; set; } = new List<List<EveManufacturialQuantity>>();

    public IList<IEnumerable<EveManufacturialQuantity>> Items { get; set; } = new List<IEnumerable<EveManufacturialQuantity>>();
    
    public EveItemManufacturingInfo ItemToBuild { get; set; }

    private IDictionary<long, EveManufacturialQuantity> allPlannedItems;

    protected override async Task OnParametersSetAsync()
    {
        var items = await EveItemSearchService.GetAllDependent(this.Id);

        var rawItems =  new SortedList<long, EveTypeManufacturingParameters>(items.ToDictionary(i => i.Id,
            i => new EveTypeManufacturingParameters(){EveType = i, Parameters = new ManufacturingParameters()}));
        this.ItemToBuild  = ManufacturingInfoBuilder.BuildInfo(this.Id, rawItems);

        this.allPlannedItems = ManufacturingInfoBuilder.GetFlatManufacturingList(this.ItemToBuild, this.Quantity);
        this.Items = ManufacturingInfoBuilder.GroupIntoStages(allPlannedItems.Values).ToList();
        foreach (var item in this.Items)
        {
            SelectedItems.Add(new List<EveManufacturialQuantity>());
        }
        base.OnParametersSet();
    }

    private void ReloadWithSelectedItems()
    {
        this.Items.Clear();
        this.allPlannedItems = ManufacturingInfoBuilder.GetFlatManufacturingList(this.ItemToBuild, this.Quantity, this.allPlannedItems);
        this.Items = ManufacturingInfoBuilder.GroupIntoStages(this.allPlannedItems.Values).ToList();
    }

    private async Task OnSearchChanged(KeyboardEventArgs keyboardEventArgs)
    {
        ReloadWithSelectedItems();
        
    }

    public BlazorTable.Column<EveManufacturialQuantity> Column1 { get; set; }

    private async Task ConfigureSelected()
    {
        var configureWindow = Modal.Show<ConfigureMaterialsForm>();
        var result = await configureWindow.Result;
        if (result.Cancelled)
        {
            return;
        }
        var data = result.Data as ConfigureMaterialsModel;
        if (data == null)
        {
            return;
        }

        foreach (var item in SelectedItems.SelectMany(i => i))
        {
            item.Material.BlueprintME = data.BlueprintMe;
            item.Material.FacilityKind = data.FacilityKind switch {
                "EngeneeringComplex" => FacilityKinds.EngeneeringComplex,
                _ => FacilityKinds.Other
                };
            item.Material.FacilityRigKind = data.FacilityRigKind switch {
                "T1" => FacilityRigKinds.T1,
                "T2" => FacilityRigKinds.T2,
                _ => FacilityRigKinds.None
                };
            Console.WriteLine($"{item.Material.Name}: ME: {item.Material.BlueprintME}; rig: {item.Material.FacilityRigKind}; facility: {item.Material.FacilityKind}");
        }
        ReloadWithSelectedItems();
    }

    private void SetBuild()
    {
        foreach (var group in SelectedItems)
        {
            foreach (var item in group)
            {
                item.Material.ForceBuy = false;
            }
        }
        ReloadWithSelectedItems();
    }
    
    private void SetBuy()
    {
        foreach (var group in SelectedItems)
        {
            foreach (var item in group)
            {
                item.Material.ForceBuy = true;
            }
        }
        ReloadWithSelectedItems();
    }

    private void SelectAll()
    {
        for (int i = 0; i < Items.Count; i++)
        {
            SelectedItems[i] = Items[i].ToList();
        }
    }

}